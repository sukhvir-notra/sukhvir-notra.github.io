[{"content":"Are you interested in creating an AI that can generate sonnets, tell jokes, or even help with your homework? In this blog, I’ll guide you through my experience of building GPT-2, following Andrej Karpathy’s comprehensive \u0026ldquo;Let\u0026rsquo;s build GPT\u0026rdquo; tutorial series.\nIn this article, I\u0026rsquo;ll share my notes and lessons learned as I delved into the intricacies of creating a large language model. I followed along with Karpathy\u0026rsquo;s videos (check them out here) and boy, did I learn a lot!\nFor those of you who want to peek under the hood, my code (which is essentially Karpathy\u0026rsquo;s with my modifications and a ton of comments for self-reference) is available on my GitHub. Don\u0026rsquo;t worry, I promise this journey will be more fun than watching paint dry (though, let\u0026rsquo;s be honest, sometimes that can be oddly satisfying). So, without further ado, let\u0026rsquo;s dive into the world of tokens, self-attention, and the occasional AI existential crisis. Grab your favourite caffeinated beverage, and let\u0026rsquo;s get started!\nTLDR: This blog chronicles the journey of building and optimising a 124-million parameter GPT-2 model. Key steps included implementing self-attention mechanisms, adding multiple attention blocks with pre-normalization, and optimizing for computational efficiency using techniques like torch.compile and flash attention. The model was trained on a powerful GPU cluster, achieving competitive validation loss and surpassing OpenAI’s GPT-2 in accuracy on the HellaSwag benchmark. Despite not reaching GPT-3’s performance, the results highlight the effectiveness of targeted optimisations in deep learning.\nUnderstanding Self-Attention in Transformer Models Self-attention is a core concept in transformer models that enables each token in a sequence to interact with other tokens, capturing dependencies and relationships within the sequence. This interaction is governed by three key components for each token: Query, Key, and Value.\nQuery represents what a token is looking for in other tokens. Key represents what information a token has that might be of interest to other tokens. Value is the actual content that will be used for the computation. To begin, let\u0026rsquo;s set up the necessary parameters and define linear layers that will project the input tokens into queries, keys, and values. The code below defines linear layers that project the input tokens into queries, keys, and values. Each of these components is essential for the self-attention mechanism. Next, I worked with an example input tensor to see how the tokens are transformed into queries, keys, and values.\nSingle attention head\nTo compute the attention weights, I used the dot product of queries and keys (line 25). This calculation determines how much focus each token should pay to other tokens by taking the dot product between q (queries) and k (keys). The result is scaled to keep values in a manageable range.\nSince I\u0026rsquo;m dealing with a decoder block, I applied a mask to ensure that each token only attends to the tokens before it in the sequence (line 29). This masking is critical in preventing a token from \u0026ldquo;seeing\u0026rdquo; future tokens, which would disrupt the sequence generation.\nFinally, I normalized the attention weights using softmax. This process of normalizing the attention scores and multiplying them with the values completes the self-attention mechanism.\nOne key observation is that self-attention does not inherently understand the order of tokens. This lack of spatial awareness means that transformers typically incorporate positional encoding to provide this information.\nIt\u0026rsquo;s also worth noting the difference between self-attention and cross-attention:\nSelf-attention: The queries, keys, and values all come from the same source. Cross-attention: The query comes from one source, while the keys and values are derived from another source. Lessons Learned: Query-Key-Value Mechanism: Understanding the distinct roles of queries, keys, and values is crucial for grasping how attention works in transformers. Masked Attention: Implementing masking in the decoder block is essential to prevent information leakage from future tokens. No Inherent Spatial Awareness: Self-attention does not inherently understand token order; positional encodings are necessary to introduce this information. Self vs. Cross-Attention: Recognizing the distinction between self-attention and cross-attention clarifies their roles within the transformer architecture. Expanding the Transformer with Attention Blocks and Pre-Normalisation Following the tutorial, the next step involved adding multiple blocks of attention heads and feedforward layers. As these layers were stacked, the neural network deepened significantly, which introduced potential optimization challenges. To mitigate these issues, the tutorial introduced the Add and Norm technique, which is crucial for maintaining stable training in deep networks.\nA notable deviation from the original \u0026ldquo;Attention is All You Need\u0026rdquo; paper was the use of pre-normalization instead of the typical post-normalization. This approach was taken to stabilize the training process as the network depth increased.\nTo prevent overfitting, a dropout layer was added. Here’s a snippet of my code that integrates these elements:\nFeedforward Network (MLP) with Dropout\nKarpathy emphasizes pre-normalization (applying LayerNorm before the linear layers) and includes a dropout layer to prevent overfitting.\nTransformer Block with Pre-Normalization and Dropout\nThe tutorial focuses solely on self-attention and feedforward blocks, without including cross-attention blocks. This is because the task at hand—text prediction—requires only past context, making cross-attention and encoders unnecessary. Instead, the implementation used a decoder-only architecture, employing a triangular mask to ensure each token only attends to previous tokens in the sequence.\nKey architectural choices highlighted in the tutorial:\nNo Cross-Attention: Focus solely on self-attention. Pre-Normalization: Layer normalization is applied before the attention and feedforward layers. Dropout: Added to prevent overfitting. Decoder-Only Architecture: The model is designed to focus on past context using triangular masking, which is well-suited for text prediction tasks. The results obtained from this implementation were:\nTrain Loss:** 1.1325 Validation Loss:** 1.1887\nHere is some sample generated text (based on the Harry Potter books corpus data set):\nhe dripped her face to get anyone else each other. \u0026lsquo;Tharge I suppose behind it talks to find and the prefect Fleur, who want for anyone, Dumbledore\u0026rsquo;s sincent, of the marble on ghostly was wait to explain him for a restretching pain, black that the pair was squart. He wondered a continue to that he had not this attacked his like for that the memor. Harry saw Alofty Luna Jords to corridor, who had told But the parchment the window, her angless stretchy awimpage had done before he could carrier tha\nThe generated text demonstrates that the model learned to produce somewhat coherent sequences, though it still includes some nonsensical phrases, which is common at this stage of training.\nLessons Learned: Deep Network Challenges: Adding multiple attention and feedforward blocks can lead to optimization issues, making techniques like Add and Norm essential. Pre-Normalization: The use of pre-normalization, as recommended in the tutorial, proved helpful in stabilizing training in deeper models. Task-Specific Design: For text prediction, a decoder-only architecture with self-attention suffices, avoiding the complexity of cross-attention and encoders. Regularization: Incorporating dropout effectively prevents overfitting, which is crucial in a deep network with many parameters. Supersize Me: Scaling Up to 124 Million Parameters But wait, there\u0026rsquo;s more! Once you\u0026rsquo;ve got your basic model up and running, it\u0026rsquo;s time to supersize it. The next phase was to create a 124-million parameter GPT-2 model.\nAt initialization, it\u0026rsquo;s expected that all vocabulary elements have a uniform probability of being the next character. Given the GPT-2 vocabulary size of 50,257, this means the initial probability for each character is 1/50257.\nGiven that the loss function is cross-entropy (or -log loss), the expected loss at initialization should be approximately:\nTraining such a large model efficiently requires thoughtful strategies. One key approach is the weight sharing scheme, which significantly reduces the number of parameters:\nCreating efficiencies: Weight sharing scheme\nThis weight sharing not only saves a significant amount of memory but also improves computational efficiency. It ensures that the model doesn\u0026rsquo;t need to maintain separate sets of weights for embedding and output, which is particularly advantageous in large-scale models like GPT-2.\nFor training, I used lambdalabs.com to set up a cluster with 8 A100 GPUs, each with 80GB of memory. This setup allowed for efficient training of the large model, which would be nearly impossible on a standard local machine.\nGPU cluster\nAnother useful trick for interacting with the code during runtime was using: import code; code.interact(local=locals()). This allowed me to pause the execution and interact with the current state of the code, which was invaluable for debugging and tweaking the model on the fly.\nExperimenting with different types of precisions, I found that using bf16 precision drastically improved performance. The time per iteration (dt) dropped from 4000ms on a local MacBook to approximately 96ms on the Lambda Labs cluster, making training much more efficient.\nLessons Learned: Expected Initial Loss: Understanding that the initial loss for a GPT-2 model is around 10.82 helps set realistic expectations at the start of training. Weight Sharing: Implementing weight sharing is a critical technique for reducing the parameter count and improving model efficiency. Efficient Hardware Use: Leveraging powerful GPUs, such as the A100s on Lambda Labs, is essential for training large models. Precision Matters: Switching to bf16 precision significantly reduces computation time, making large-scale model training more feasible. The Need for Speed: Optimizing Your AI To push the performance further, several optimizations were implemented. First up was torch.compile(), which brought the iteration time (dt) down to approximately 60ms.\nThe efficiency gain here comes from torch.compile\u0026rsquo;s ability to reduce multiple round trips between High Bandwidth Memory (HBM) and GPU cores. By streamlining calculations within the GPU cores and minimizing the data transfers back to HBM, significant time savings were achieved.\nHowever, torch.compile was just the beginning. Flash attention proved to be even more effective, especially for handling softmax operations. Flash attention fuses all attention operations within a transformer into a single, highly efficient kernel: F.scaled_dot_product_attention(q,k,v, is_causal = True)\nAnother optimization involved using non-ugly numbers—specifically, adjusting the vocabulary size from 50,257 to 50,304, a number more amenable to power-of-2 operations. This adjustment slightly increases the tensor size, padding it with extra characters, but the resulting softmax probabilities for these padded characters are effectively ignored during computations. Despite the additional characters, this tweak boosts overall efficiency.\nThese optimizations collectively improved performance by 32x.\nFurther algorithmic improvements were based on insights from the GPT-3 paper:\nAdamW Optimizer: Betas were set to 0.9 and 0.95, with an epsilon of 1e-8. Gradient Clipping: Gradients were clipped to a norm of 1.0 to prevent large updates from bad batches. Learning Rate Scheduler: Implemented cosine decay with a warmup period. Weight Decay: Applied only to weight tensors, not biases, leveraging kernel fusion. Gradient Accumulation: Simulated a large batch size (up to 0.5 million) through gradient accumulation. To fully utilize the available hardware, Distributed Data Parallel (DDP) was introduced, spreading the workload across 8 GPUs. The training script was executed using:\ntorchrun --standalone --nproc_per_node=8 train_gpt2.py ... [other args] Within this setup, gradient synchronization was carefully managed to ensure efficiency:\nThis ensures that gradients are only synchronized during the final accumulation step, reducing overhead. It\u0026rsquo;s worth noting that this feature might be deprecated in the future, so ongoing monitoring is advised.\nAs the model scaled, so did the training dataset. The Hugging Face FineWeb-edu dataset (sample-10BT subset) was chosen for its high educational content, providing a substantial training corpus.\nFor evaluation, several strategies were implemented:\nEvaluation Frequency: An evaluation and sample generation were triggered every 100th step. Evaluation Dataset: The Hellswag dataset was used for this purpose. Learning Rate Experimentation: Unlike the standard approach, a higher learning rate was tested to observe its impact on the model\u0026rsquo;s learning. Lessons Learned Torch.compile() and Flash Attention: These optimizations are key for reducing computation time and enhancing performance. Power-of-2 Adjustments: Aligning tensor sizes to power-of-2 values can improve computational efficiency. Algorithmic Tweaks: Adopting strategies from the GPT-3 paper, such as specific optimizer settings and gradient clipping, significantly stabilizes training. Distributed Training: Utilizing multiple GPUs effectively with DDP is essential for scaling large models. Dataset Expansion: Growing the dataset and incorporating high-quality content is critical as the model size increases. Custom Evaluation Strategies: Regular evaluations and testing different learning rates provide valuable insights into model performance. Conclusion After implementing the various optimizations discussed, including advanced techniques like torch.compile, flash attention, and the use of non-ugly numbers, the 124-million parameter GPT-2 model showed significant improvements in both training efficiency and performance. As seen in the training and validation loss graph, the model reached a validation loss comparable to OpenAI\u0026rsquo;s GPT-2 implementation, indicating that the optimizations were effective in maintaining model accuracy while improving computational efficiency. Notably, our model achieved a validation loss of approximately 3.0, which aligns closely with OpenAI’s GPT-2 checkpoint.\nThe HellaSwag evaluation benchmark further highlighted the strengths of our optimized GPT-2 model. While it does not yet match the performance of OpenAI’s GPT-3 model, our implementation consistently outperformed the original GPT-2 baseline in terms of accuracy, steadily climbing to nearly 30%. This demonstrates that with targeted optimizations and careful attention to both hardware and algorithmic efficiency, it is possible to build and train large-scale models that approach the performance of industry-leading implementations. These results reinforce the importance of continuous experimentation and adaptation when working with deep learning models.\n","permalink":"http://localhost:1313/posts/creating_gpt2_my_lessons_learnt/","summary":"\u003cp\u003eAre you interested in creating an AI that can generate sonnets, tell jokes, or even help with your homework? In this blog, I’ll guide you through my experience of building GPT-2, following Andrej Karpathy’s comprehensive \u0026ldquo;Let\u0026rsquo;s build GPT\u0026rdquo; tutorial series.\u003c/p\u003e\n\u003cp\u003eIn this article, I\u0026rsquo;ll share my notes and lessons learned as I delved into the intricacies of creating a large language model. I followed along with Karpathy\u0026rsquo;s videos (check them out \u003ca href=\"https://www.youtube.com/watch?v=l8pRSuU81PU\u0026amp;list=PLAqhIrjkxbuWI23v9cThsA9GvCAUhRvKZ\u0026amp;index=10\u0026amp;ref=sukhvir-ai.ghost.io\"\u003ehere\u003c/a\u003e) and boy, did I learn a lot!\u003c/p\u003e","title":"💡 Creating GPT2: My lessons learnt"},{"content":" Neural Networks \u0026amp; Backpropagation: My First Steps with Karpathy\u0026rsquo;s Zero to Hero Welcome to the first installment of my blog series inspired by Andrej Karpathy\u0026rsquo;s \u0026ldquo;Zero to Hero\u0026rdquo; lecture series on AI and Machine Learning. Buckle up, because I\u0026rsquo;m diving headfirst into the magical world of neural networks and backpropagation!\nMy Jupyter notebook for this post: here\nA Calculus Refresher: Derivatives, Slopes, and Other Fun Stuff Karpathy kicks off the lecture with a crash course in basic calculus, focusing specifically on derivatives. Now, if you\u0026rsquo;re like me and calculus brings back memories of late-night study sessions and too much caffeine, fear not! This foundational knowledge is essential for understanding how neural networks (NNs) function.\nEssentially, I\u0026rsquo;m trying to wrap my head around how changing weights and biases—the key parameters of NNs—affect the output. In other words, derivatives help me figure out how much each weight in the network impacts the final output.\nKey takeaways:\nDerivatives and Impact: The derivative of the output with respect to each leaf node in the network shows me how much influence those nodes have on the overall output. This is crucial for tuning the NN effectively. Backpropagation Visualized: Karpathy walks through a detailed example of backpropagation using a pseudo neural network. This step-by-step process helps me visualize how backpropagation works and how chain rule derivatives come into play. Activation Functions Galore: I also touched on activation functions like tanh and sigmoid, which are the magic sauce that helps NNs make decisions. Automating Backpropagation: The lecture discusses how to algorithmically automate backpropagation and the importance of topological sort to ensure that I don\u0026rsquo;t backpropagate until the forward pass is complete. Level of Detail: Depending on my masochistic tendencies (or dedication to understanding every little detail), I can either implement the tanh function directly or break it down into its individual components. PyTorch to the Rescue: PyTorch offers some handy abstractions to make life easier. For instance, its tensors are float32 by default, but I can cast them to .double() for float64 precision, matching Python\u0026rsquo;s default floating-point precision. Also, I need to enable gradient calculation explicitly for leaf nodes (requires_grad=True), as they don\u0026rsquo;t do it by default for efficiency reasons. Here\u0026rsquo;s a snippet showing this in action:\nimport torch \u0026#39;\u0026#39;\u0026#39; Casting the tensors as doubles and enabling gradient calculation \u0026#39;\u0026#39;\u0026#39; x1 = torch.Tensor([2.0]).double() ; x1.requires_grad = True x2 = torch.Tensor([0.0]).double() ; x2.requires_grad = True w1 = torch.Tensor([-3.0]).double() ; w1.requires_grad = True w2 = torch.Tensor([1.0]).double() ; w2.requires_grad = True b = torch.Tensor([6.8813735870195432]).double() ; b.requires_grad = True # Forward pass calculation n = x1*w1 + x2*w2 + b o = torch.tanh(n) print(f\u0026#34;Output (o): {o.data.item()}\u0026#34;) # Backward pass (calculating gradients) o.backward() print(\u0026#39;--- Gradients ---\u0026#39;) print(f\u0026#39;x2 grad: {x2.grad.item()}\u0026#39;) print(f\u0026#39;w2 grad: {w2.grad.item()}\u0026#39;) print(f\u0026#39;x1 grad: {x1.grad.item()}\u0026#39;) print(f\u0026#39;w1 grad: {w1.grad.item()}\u0026#39;) print(f\u0026#39;b grad: {b.grad.item()}\u0026#39;) # Added bias gradient display Building Blocks: Neurons, Layers, and MLPs I then dove into the class definitions of a single neuron, a layer of neurons, and a Multi-Layer Perceptron (MLP). This section is all about understanding the fundamental building blocks of NNs and how they interconnect and work together.\nMain takeaways: Understanding the components is one thing; training them is another!\nThe Learning Rate Dilemma: One of the critical aspects of training NNs is choosing the appropriate learning rate. It\u0026rsquo;s a bit of a Goldilocks problem: too large a step size and I might overshoot the optimal minimum loss; too small and training will be painfully slow (or get stuck in local minima). Pro Tip - Zeroing the Grads: A key step before backpropagation in each training iteration in PyTorch is to zero out the gradients from the previous step (p.grad = 0.0). If I forget this, PyTorch accumulates gradients across iterations, leading to incorrect updates and a lot of head-scratching. Here\u0026rsquo;s a basic training loop structure illustrating this:\n# Assuming \u0026#39;n\u0026#39; is our MLP model, \u0026#39;xs\u0026#39; are inputs, \u0026#39;ys\u0026#39; are target outputs # And we have defined a loss function (e.g., Mean Squared Error implicitly below) learning_rate = 0.05 epochs = 20 for k in range(epochs): # Forward pass: Get predictions for all inputs ypred = [n(x) for x in xs] # Calculate loss (sum of squared errors example) loss = sum((yout - ygt)**2 for ygt, yout in zip(ys, ypred)) # Backward pass # \u0026gt;\u0026gt;\u0026gt; Crucial Step: Zero the gradients before calculating new ones \u0026lt;\u0026lt;\u0026lt; for p in n.parameters(): p.grad = 0.0 loss.backward() # Calculate gradients for this batch # Update weights and biases with torch.no_grad(): # Temporarily disable gradient tracking for updates for p in n.parameters(): p.data += -learning_rate * p.grad # Gradient descent step print(f\u0026#34;Epoch {k}, Loss: {loss.item()}\u0026#34;) # Use .item() to get Python number Summing It Up In summary, this first dive covered how neural networks are structured, how to calculate their loss (how wrong they are), and how to use backpropagation (leveraging the power of derivatives via the chain rule, implemented as gradient descent) to minimize this loss and make the network learn. I explored the tanh activation function, built the fundamental components of a neural network from scratch, and got my hands dirty with PyTorch basics.\nStay tuned for more posts in this series as I continue my journey from zero to hero in the world of AI and ML! And remember, in the immortal words of Karpathy (and perhaps a few stressed-out students), \u0026ldquo;Happy learning, and may your gradients always descend!\u0026rdquo;\n","permalink":"http://localhost:1313/posts/nn_and_backpropagation/","summary":"\u003chr\u003e\n\u003ch1 id=\"neural-networks--backpropagation-my-first-steps-with-karpathys-zero-to-hero\"\u003eNeural Networks \u0026amp; Backpropagation: My First Steps with Karpathy\u0026rsquo;s Zero to Hero\u003c/h1\u003e\n\u003cp\u003eWelcome to the first installment of my blog series inspired by Andrej Karpathy\u0026rsquo;s \u0026ldquo;Zero to Hero\u0026rdquo; lecture series on AI and Machine Learning. Buckle up, because I\u0026rsquo;m diving headfirst into the magical world of neural networks and backpropagation!\u003c/p\u003e\n\u003cdiv style=\"position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;\"\u003e\n      \u003ciframe allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen=\"allowfullscreen\" loading=\"eager\" referrerpolicy=\"strict-origin-when-cross-origin\" src=\"https://www.youtube.com/embed/VMj-3S1tku0?autoplay=0\u0026amp;controls=1\u0026amp;end=0\u0026amp;loop=0\u0026amp;mute=0\u0026amp;start=0\" style=\"position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;\" title=\"YouTube video\"\u003e\u003c/iframe\u003e\n    \u003c/div\u003e\n\n\u003cp\u003e\u003cstrong\u003eMy Jupyter notebook for this post:\u003c/strong\u003e \u003ca href=\"https://github.com/sukhvir-notra/AI-Learning-Zero-to-Hero?ref=sukhvir-ai.ghost.io\"\u003ehere\u003c/a\u003e\u003c/p\u003e","title":"🧠 Neural Networks and Backpropagation"},{"content":"Welcome to my blog! Consider this the launchpad for an exploration into some truly fascinating fields. Buckle up, because we\u0026rsquo;re about to dive headfirst into the dynamic worlds of cybersecurity, cyber operations, artificial intelligence, and honestly, probably some other interesting tech tangents that catch my eye along the way.\nThe best part? I’m inviting you to join the adventure. Let’s learn together – and maybe try to keep the sentient AI and the critical system breaches to a minimum, shall we? 😉\nWhy These Topics? You might be wondering why this particular mix. For me, these fields represent an incredible intersection of complex challenges, critical thinking, logic, and technologies that are rapidly shaping our future. It often feels like trying to keep up with a viral cat video – things move that fast! – and diving deep feels both exciting and essential. Plus, learning is always better when shared, right?\nWhat to Expect Here On this blog, you\u0026rsquo;ll get a candid look at my learning process across these areas – the breakthroughs, the roadblocks, and everything in between. Expect things like:\nDeep Dives: We\u0026rsquo;ll venture down various rabbit holes together – exploring security frameworks, operational tactics, AI concepts like Retrieval-Augmented Generation (RAG), and whatever else sparks curiosity. Projects \u0026amp; Experiments: Follow along as I tinker, build, (probably) break, and eventually (hopefully) fix things. I plan to share code snippets, lessons learned (especially from mistakes!), and those satisfying \u0026ldquo;aha!\u0026rdquo; moments. News \u0026amp; Perspectives: I’ll do my best to share interesting developments, news, and perspectives from the cyber and AI worlds, and perhaps other tech frontiers. These fields are wild rides, and it helps to stay informed together. A Few Ground Rules To make this a great space for everyone:\nNo Judgement Zone: Whether you’re just dipping your toes into these topics or you\u0026rsquo;re a seasoned pro, you\u0026rsquo;re absolutely welcome here. Let’s support each other and maybe share a laugh over our inevitable tech mishaps. Questions Welcome: Got a burning question about something we discuss? Ask away! I might not always have the answer instantly (that\u0026rsquo;s part of the learning!), but we can certainly explore it together. Stay Curious: These fields are vast and constantly evolving. Let’s approach them with curiosity, keep learning, keep questioning, and see what we can discover or even build along the way. Final Thoughts So, grab your beverage of choice (virtual popcorn still works!) and settle in. I\u0026rsquo;m genuinely excited to share this learning adventure with you as we navigate the fascinating landscapes of cyber security, operations, and AI. Let\u0026rsquo;s explore, question, and figure things out together.\nThanks for stopping by!\nCheers,\nSukhvir\n","permalink":"http://localhost:1313/posts/welcome/","summary":"\u003cp\u003eWelcome to my blog! Consider this the launchpad for an exploration into some truly fascinating fields. Buckle up, because we\u0026rsquo;re about to dive headfirst into the dynamic worlds of \u003cstrong\u003ecybersecurity, cyber operations, artificial intelligence\u003c/strong\u003e, and honestly, probably some other interesting tech tangents that catch my eye along the way.\u003c/p\u003e\n\u003cp\u003eThe best part? I’m inviting you to join the adventure. Let’s learn together – and maybe try to keep the sentient AI \u003cem\u003eand\u003c/em\u003e the critical system breaches to a minimum, shall we? 😉\u003c/p\u003e","title":"Welcome 👋"}]